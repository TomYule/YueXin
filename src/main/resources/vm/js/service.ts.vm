#set($buildPagination="$")
import axios from 'axios';

import buildPaginationQueryOpts from '@/shared/sort/sorts';

import { I${ClassName} } from '@/shared/model/${BusinessName}.model';

const baseApiUrl = 'api/${BusinessName}s';

export default class ${ClassName}Service {
    public find($pkColumn.columnName: $pkColumn.tsType): Promise<I${ClassName}> {
        return new Promise<I${ClassName}>((resolve, reject) => {
            axios
                .get(`${baseApiUrl}/${id}`)
                .then(res => {
                    resolve(res.data);
                })
                .catch(err => {
                    reject(err);
                });
        });
    }

    public retrieve(paginationQuery?: any): Promise<any> {
        return new Promise<any>((resolve, reject) => {
            axios
                .get(baseApiUrl + `?${buildPagination}{buildPaginationQueryOpts(paginationQuery)}`)
                .then(res => {
                    resolve(res);
                })
                .catch(err => {
                    reject(err);
                });
        });
    }

    public delete($pkColumn.columnName: $pkColumn.tsType): Promise<any> {
        return new Promise<any>((resolve, reject) => {
            axios
                .delete(`${baseApiUrl}/${id}`)
                .then(res => {
                    resolve(res);
                })
                .catch(err => {
                    reject(err);
                });
        });
    }

    public create(entity: I${ClassName}): Promise<I${ClassName}> {
        return new Promise<I${ClassName}>((resolve, reject) => {
            axios
                .post(`${baseApiUrl}`, entity)
                .then(res => {
                    resolve(res.data);
                })
                .catch(err => {
                    reject(err);
                });
        });
    }

    public update(entity: I${ClassName}): Promise<I${ClassName}> {
        return new Promise<I${ClassName}>((resolve, reject) => {
            axios
                .put(`${baseApiUrl}`, entity)
                .then(res => {
                    resolve(res.data);
                })
                .catch(err => {
                    reject(err);
                });
        });
    }
}
