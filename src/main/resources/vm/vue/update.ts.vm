#set($store="$")
import { Component, Inject } from 'vue-property-decorator';

import { mixins } from 'vue-class-component';
import JhiDataUtils from '@/shared/data/data-utils.service';

import { numeric, required, minLength, maxLength, minValue, maxValue } from 'vuelidate/lib/validators';

import AlertService from '@/shared/alert/alert.service';
import { I${ClassName}, ${ClassName} } from '@/shared/model/${BusinessName}.model';
import ${ClassName}Service from './${BusinessName}.service';

const validations: any = {
    ${className}: {
#foreach ($column in $columns)
    ${column.columnName}: {},
#end
    },
};

@Component({
    validations,
})
export default class ${ClassName}Update extends mixins(JhiDataUtils) {
    @Inject('alertService') private alertService: () => AlertService;
    @Inject('${className}Service') private ${className}Service: () => ${ClassName}Service;
    public ${className}: I${ClassName} = new ${ClassName}();
    public isSaving = false;
    public currentLanguage = '';

    beforeRouteEnter(to, from, next) {
        next(vm => {
            if (to.params.${className}Id) {
                vm.retrieve${ClassName}(to.params.${className}Id);
            }
        });
    }

    created(): void {
        this.currentLanguage = this.$store.getters.currentLanguage;
        this.${store}store.watch(
        () => this.${store}store.getters.currentLanguage,
        () => {
        this.currentLanguage = this${store}store.getters.currentLanguage;
        }
        );
    }

    public save(): void {
        this.isSaving = true;
        if (this.${className}.$pkColumn.columnName) {
            this.${className}Service()
                .update(this.${className})
                .then(param => {
                    this.isSaving = false;
                    this.$router.go(-1);
                    const message = this.$t('yueXinApp.${className}.updated', { param: param.$pkColumn.columnName });
                    this.alertService().showAlert(message, 'info');
                });
        } else {
            this.${className}Service()
                .create(this.${className})
                .then(param => {
                    this.isSaving = false;
                    this.$router.go(-1);
                    const message = this.$t('yueXinApp.${className}.created', { param: param.$pkColumn.columnName });
                    this.alertService().showAlert(message, 'success');
                });
        }
    }

    public retrieve${ClassName}(${className}Id): void {
        this.${className}Service()
            .find(${className}Id)
            .then(res => {
                this.${className} = res;
            });
    }

    public previousState(): void {
        this.$router.go(-1);
    }

    public initRelationships(): void {}
}
