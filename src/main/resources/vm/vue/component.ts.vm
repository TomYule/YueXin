import { mixins } from 'vue-class-component';

import { Component, Vue, Inject } from 'vue-property-decorator';
import Vue2Filters from 'vue2-filters';
import { I${ClassName} } from '@/shared/model/${BusinessName}.model';
import AlertMixin from '@/shared/alert/alert.mixin';

import JhiDataUtils from '@/shared/data/data-utils.service';

import ${ClassName}Service from './${BusinessName}.service';

@Component({
    mixins: [Vue2Filters.mixin],
})
export default class ${ClassName} extends mixins(JhiDataUtils, AlertMixin) {
    @Inject('${className}Service') private ${className}Service: () => ${ClassName}Service;
    private removeId: number = null;
    public itemsPerPage = 20;
    public queryCount: number = null;
    public page = 1;
    public previousPage = 1;
    public propOrder = '$pkColumn.columnName';
    public reverse = false;
    public totalItems = 0;

    public ${className}s: I${ClassName}[] = [];

    public isFetching = false;

    public mounted(): void {
        this.retrieveAll${ClassName}s();
    }

    public clear(): void {
        this.page = 1;
        this.retrieveAll${ClassName}s();
    }

    public retrieveAll${ClassName}s(): void {
        this.isFetching = true;

        const paginationQuery = {
            page: this.page - 1,
            size: this.itemsPerPage,
            sort: this.sort(),
        };
        this.${className}Service()
            .retrieve(paginationQuery)
            .then(
                res => {
                    this.${className}s = res.data;
                    this.totalItems = Number(res.headers['x-total-count']);
                    this.queryCount = this.totalItems;
                    this.isFetching = false;
                },
                err => {
                    this.isFetching = false;
                }
            );
    }

    public prepareRemove(instance: I${ClassName}): void {
        this.removeId = instance.$pkColumn.columnName;
        if (<any>this.$refs.removeEntity) {
            (<any>this.$refs.removeEntity).show();
        }
    }

    public remove${ClassName}(): void {
        this.${className}Service()
            .delete(this.removeId)
            .then(() => {
                const message = this.$t('yueXinApp.${className}.deleted', { param: this.removeId });
                this.alertService().showAlert(message, 'danger');
                this.getAlertFromStore();
                this.removeId = null;
                this.retrieveAll${ClassName}s();
                this.closeDialog();
            });
    }

    public sort(): Array<any> {
        const result = [this.propOrder + ',' + (this.reverse ? 'asc' : 'desc')];
        if (this.propOrder !== '$pkColumn.columnName') {
            result.push('$pkColumn.columnName');
        }
        return result;
    }

    public loadPage(page: number): void {
        if (page !== this.previousPage) {
            this.previousPage = page;
            this.transition();
        }
    }

    public transition(): void {
        this.retrieveAll${ClassName}s();
    }

    public changeOrder(propOrder): void {
        this.propOrder = propOrder;
        this.reverse = !this.reverse;
        this.transition();
    }

    public closeDialog(): void {
        (<any>this.$refs.removeEntity).hide();
    }
}
