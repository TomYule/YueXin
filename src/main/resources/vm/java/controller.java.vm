package ${packageName}.controller;

import ${packageName}.domain.${ClassName};
import ${packageName}.service.${ClassName}Service;
import com.yuexin.web.rest.errors.BadRequestAlertException;

import io.github.jhipster.web.util.HeaderUtil;
import io.github.jhipster.web.util.PaginationUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing {@link com.yuexin.domain.${ClassName}}.
 */
@RestController
@RequestMapping("/api")
@Transactional
public class ${ClassName}Resource {

    private final Logger log = LoggerFactory.getLogger(${ClassName}Resource.class);

    private static final String ENTITY_NAME = "${className}";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final ${ClassName}Service ${className}Service;

    public ${ClassName}Resource(${ClassName}Service ${className}Service) {
        this.${className}Service = ${className}Service;
    }

    /**
     * {@code POST  /${BusinessName}} : Create a new ${className}.
     *
     * @param ${className} the ${className} to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new ${className},
     * or with status {@code 400 (Bad Request)} if the ${className} has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/${BusinessName}")
    public ResponseEntity<${ClassName}> create${ClassName}(@Valid @RequestBody ${ClassName} ${className}) throws URISyntaxException {
        log.debug("REST request to save ${ClassName} : {}", ${className});
        if (${className}.getId() != null) {
            throw new BadRequestAlertException("A new ${className} cannot already have an ID", ENTITY_NAME, "idexists");
        }
        ${ClassName} result = ${className}Service.insert(${className});
        return ResponseEntity.created(new URI("/api/${BusinessName}/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * {@code PUT  /${BusinessName}} : Updates an existing ${className}.
     *
     * @param ${className} the ${className} to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated ${className},
     * or with status {@code 400 (Bad Request)} if the ${className} is not valid,
     * or with status {@code 500 (Internal Server Error)} if the ${className} couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/${BusinessName}")
    public ResponseEntity<${ClassName}> update${ClassName}(@Valid @RequestBody ${ClassName} ${className}) throws URISyntaxException {
        log.debug("REST request to update ${ClassName} : {}", ${className});
        if (${className}.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        ${className}Service.update(${className});
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, ${className}.getId().toString()))
            .body(${className});
    }

    /**
     * {@code GET  /${BusinessName}} : get all the ${className}s.
     *
     * @param pageable the pagination information.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of ${className}s in body.
     */
    @GetMapping("/${BusinessName}")
    public ResponseEntity<List<${ClassName}>> getAll${ClassName}s(Pageable pageable) {
        log.debug("REST request to get a page of ${ClassName}s");
        Page<${ClassName}> page = ${className}Service.query(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);
        return ResponseEntity.ok().headers(headers).body(page.getContent());
    }

    /**
     * {@code GET  /${BusinessName}/:id} : get the "id" ${className}.
     *
     * @param id the id of the ${className} to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the ${className}, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/${BusinessName}/{id}")
    public ResponseEntity<${ClassName}> get${ClassName}(@PathVariable Long id) {
        log.debug("REST request to get ${ClassName} : {}", id);
        Optional<${ClassName}> ${className} = Optional.ofNullable(${className}Service.fetch(id));
        return ResponseUtil.wrapOrNotFound(${className});
    }

    /**
     * {@code DELETE  /${BusinessName}/:id} : delete the "id" ${className}.
     *
     * @param id the id of the ${className} to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/${BusinessName}/{id}")
    public ResponseEntity<Void> delete${ClassName}(@PathVariable Long id) {
        log.debug("REST request to delete ${ClassName} : {}", id);
        ${className}Service.delete(id);
        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();
    }
}
